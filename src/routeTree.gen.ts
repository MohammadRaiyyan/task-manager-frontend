/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UserProfileRouteImport } from './routes/user-profile'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as NotificationsRouteImport } from './routes/notifications'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TasksIndexRouteImport } from './routes/tasks/index'
import { Route as WorkspaceWorkspaceIdRouteImport } from './routes/workspace/$workspaceId'
import { Route as FormAddressRouteImport } from './routes/form/address'
import { Route as DemoTanstackQueryRouteImport } from './routes/demo.tanstack-query'
import { Route as WorkspaceWorkspaceIdGroupIdRouteImport } from './routes/workspace/$workspaceId.$groupId'
import { Route as TasksDetailTaskIdRouteImport } from './routes/tasks/detail/$taskId'
import { Route as DemoFormSimpleRouteImport } from './routes/demo.form.simple'
import { Route as DemoFormAddressRouteImport } from './routes/demo.form.address'

const UserProfileRoute = UserProfileRouteImport.update({
  id: '/user-profile',
  path: '/user-profile',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const NotificationsRoute = NotificationsRouteImport.update({
  id: '/notifications',
  path: '/notifications',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TasksIndexRoute = TasksIndexRouteImport.update({
  id: '/tasks/',
  path: '/tasks/',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkspaceWorkspaceIdRoute = WorkspaceWorkspaceIdRouteImport.update({
  id: '/workspace/$workspaceId',
  path: '/workspace/$workspaceId',
  getParentRoute: () => rootRouteImport,
} as any)
const FormAddressRoute = FormAddressRouteImport.update({
  id: '/form/address',
  path: '/form/address',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoTanstackQueryRoute = DemoTanstackQueryRouteImport.update({
  id: '/demo/tanstack-query',
  path: '/demo/tanstack-query',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkspaceWorkspaceIdGroupIdRoute =
  WorkspaceWorkspaceIdGroupIdRouteImport.update({
    id: '/$groupId',
    path: '/$groupId',
    getParentRoute: () => WorkspaceWorkspaceIdRoute,
  } as any)
const TasksDetailTaskIdRoute = TasksDetailTaskIdRouteImport.update({
  id: '/tasks/detail/$taskId',
  path: '/tasks/detail/$taskId',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoFormSimpleRoute = DemoFormSimpleRouteImport.update({
  id: '/demo/form/simple',
  path: '/demo/form/simple',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoFormAddressRoute = DemoFormAddressRouteImport.update({
  id: '/demo/form/address',
  path: '/demo/form/address',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/notifications': typeof NotificationsRoute
  '/settings': typeof SettingsRoute
  '/user-profile': typeof UserProfileRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/form/address': typeof FormAddressRoute
  '/workspace/$workspaceId': typeof WorkspaceWorkspaceIdRouteWithChildren
  '/tasks': typeof TasksIndexRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
  '/tasks/detail/$taskId': typeof TasksDetailTaskIdRoute
  '/workspace/$workspaceId/$groupId': typeof WorkspaceWorkspaceIdGroupIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/notifications': typeof NotificationsRoute
  '/settings': typeof SettingsRoute
  '/user-profile': typeof UserProfileRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/form/address': typeof FormAddressRoute
  '/workspace/$workspaceId': typeof WorkspaceWorkspaceIdRouteWithChildren
  '/tasks': typeof TasksIndexRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
  '/tasks/detail/$taskId': typeof TasksDetailTaskIdRoute
  '/workspace/$workspaceId/$groupId': typeof WorkspaceWorkspaceIdGroupIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/notifications': typeof NotificationsRoute
  '/settings': typeof SettingsRoute
  '/user-profile': typeof UserProfileRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/form/address': typeof FormAddressRoute
  '/workspace/$workspaceId': typeof WorkspaceWorkspaceIdRouteWithChildren
  '/tasks/': typeof TasksIndexRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
  '/tasks/detail/$taskId': typeof TasksDetailTaskIdRoute
  '/workspace/$workspaceId/$groupId': typeof WorkspaceWorkspaceIdGroupIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/notifications'
    | '/settings'
    | '/user-profile'
    | '/demo/tanstack-query'
    | '/form/address'
    | '/workspace/$workspaceId'
    | '/tasks'
    | '/demo/form/address'
    | '/demo/form/simple'
    | '/tasks/detail/$taskId'
    | '/workspace/$workspaceId/$groupId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/notifications'
    | '/settings'
    | '/user-profile'
    | '/demo/tanstack-query'
    | '/form/address'
    | '/workspace/$workspaceId'
    | '/tasks'
    | '/demo/form/address'
    | '/demo/form/simple'
    | '/tasks/detail/$taskId'
    | '/workspace/$workspaceId/$groupId'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/notifications'
    | '/settings'
    | '/user-profile'
    | '/demo/tanstack-query'
    | '/form/address'
    | '/workspace/$workspaceId'
    | '/tasks/'
    | '/demo/form/address'
    | '/demo/form/simple'
    | '/tasks/detail/$taskId'
    | '/workspace/$workspaceId/$groupId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRoute
  NotificationsRoute: typeof NotificationsRoute
  SettingsRoute: typeof SettingsRoute
  UserProfileRoute: typeof UserProfileRoute
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
  FormAddressRoute: typeof FormAddressRoute
  WorkspaceWorkspaceIdRoute: typeof WorkspaceWorkspaceIdRouteWithChildren
  TasksIndexRoute: typeof TasksIndexRoute
  DemoFormAddressRoute: typeof DemoFormAddressRoute
  DemoFormSimpleRoute: typeof DemoFormSimpleRoute
  TasksDetailTaskIdRoute: typeof TasksDetailTaskIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/user-profile': {
      id: '/user-profile'
      path: '/user-profile'
      fullPath: '/user-profile'
      preLoaderRoute: typeof UserProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/notifications': {
      id: '/notifications'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof NotificationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tasks/': {
      id: '/tasks/'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof TasksIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/workspace/$workspaceId': {
      id: '/workspace/$workspaceId'
      path: '/workspace/$workspaceId'
      fullPath: '/workspace/$workspaceId'
      preLoaderRoute: typeof WorkspaceWorkspaceIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/form/address': {
      id: '/form/address'
      path: '/form/address'
      fullPath: '/form/address'
      preLoaderRoute: typeof FormAddressRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/demo/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/workspace/$workspaceId/$groupId': {
      id: '/workspace/$workspaceId/$groupId'
      path: '/$groupId'
      fullPath: '/workspace/$workspaceId/$groupId'
      preLoaderRoute: typeof WorkspaceWorkspaceIdGroupIdRouteImport
      parentRoute: typeof WorkspaceWorkspaceIdRoute
    }
    '/tasks/detail/$taskId': {
      id: '/tasks/detail/$taskId'
      path: '/tasks/detail/$taskId'
      fullPath: '/tasks/detail/$taskId'
      preLoaderRoute: typeof TasksDetailTaskIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/form/simple': {
      id: '/demo/form/simple'
      path: '/demo/form/simple'
      fullPath: '/demo/form/simple'
      preLoaderRoute: typeof DemoFormSimpleRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/form/address': {
      id: '/demo/form/address'
      path: '/demo/form/address'
      fullPath: '/demo/form/address'
      preLoaderRoute: typeof DemoFormAddressRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface WorkspaceWorkspaceIdRouteChildren {
  WorkspaceWorkspaceIdGroupIdRoute: typeof WorkspaceWorkspaceIdGroupIdRoute
}

const WorkspaceWorkspaceIdRouteChildren: WorkspaceWorkspaceIdRouteChildren = {
  WorkspaceWorkspaceIdGroupIdRoute: WorkspaceWorkspaceIdGroupIdRoute,
}

const WorkspaceWorkspaceIdRouteWithChildren =
  WorkspaceWorkspaceIdRoute._addFileChildren(WorkspaceWorkspaceIdRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRoute,
  NotificationsRoute: NotificationsRoute,
  SettingsRoute: SettingsRoute,
  UserProfileRoute: UserProfileRoute,
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
  FormAddressRoute: FormAddressRoute,
  WorkspaceWorkspaceIdRoute: WorkspaceWorkspaceIdRouteWithChildren,
  TasksIndexRoute: TasksIndexRoute,
  DemoFormAddressRoute: DemoFormAddressRoute,
  DemoFormSimpleRoute: DemoFormSimpleRoute,
  TasksDetailTaskIdRoute: TasksDetailTaskIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
